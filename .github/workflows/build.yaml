# NOTE: This workflow is overkill for most R packages
# check-standard.yaml is likely a better choice
# usethis::use_github_action("check-standard") will install it.
#
# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

name: build

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: '3.5'}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}

      - name: Install dependencies
        run: |
          install.packages('remotes')
          remotes::install_cran("rcmdcheck")
          remotes::install_cran("sessioninfo")
          remotes::install_cran("devtools")
          remotes::install_cran("testthat")
          remotes::install_cran("testit")
        shell: Rscript {0}

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: build
        env:
          _R_CHECK_CRAN_INCOMING_: false
        run: |
          dir.create("rlib")
          getPackages <- function(packs){
            packages <- unlist(
              tools::package_dependencies(packs,
              #which = "most",
                                          available.packages(),
                                          recursive=TRUE)
            )
            union(packs, packages)
          }
          packages <- getPackages(c("readstata13"))
          download.packages(packages,
                            destdir = "rlib", 
                            type = "source")
          setwd("rlib")
          tfls <- dir(pattern = "*.tar.gz")
          dir.create("pkgs")
          for (pkg in packages) {
            tfl <- grepl(pkg, tfls)
            if (!isFALSE(tfl)) {
              utils::untar(tfls[tfl])
              # rcmdcheck::rcmdcheck(path = pkg, args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
              devtools::build(pkg = pkg, binary = TRUE)
            }
          }
          setwd("..")
        shell: Rscript {0}

      - name: Build binary package
        if: success() 
        run: |
          mkdir -p build
          mv rlib/*.zip .
        shell: bash 

      - name: Upload build results
        if: success() && runner.os != 'Linux'
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r-${{ matrix.config.r }}-pkg
          path: build
