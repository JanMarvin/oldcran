# NOTE: This workflow is overkill for most R packages
# check-standard.yaml is likely a better choice
# usethis::use_github_action("check-standard") will install it.
#
# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

name: build

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: '3.5'}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}

      - uses: r-lib/actions/setup-pandoc@master
      
        #- uses: r-lib/actions/setup-tinytex@v1

      - name: Install dependencies
        run: |
          install.packages('remotes')
          remotes::install_version("drat", version = "0.1.6")
          drat::addRepo('oldcran')
          remotes::install_cran("rcmdcheck", build = TRUE)
          remotes::install_cran("sessioninfo", build = TRUE)
          remotes::install_cran("devtools", build = TRUE)
          remotes::install_cran("testthat", build = TRUE)
          remotes::install_cran("testit", build = TRUE)
          remotes::install_cran("roxygen2", build = TRUE)
          # required for tidyverse
          remotes::install_cran("covr", build = TRUE)
          remotes::install_cran("feather", build = TRUE)
          remotes::install_cran("glue", build = TRUE)
          remotes::install_cran("knitr", build = TRUE)
          remotes::install_cran("rmarkdown", build = TRUE)
          remotes::install_cran("pkgdown", build = TRUE)
          remotes::install_cran("tidytemplae", build = TRUE)
          # required for data.table
          remotes::install_cran("bit64", build = TRUE)
          remotes::install_cran("R.utils", build = TRUE)
          remotes::install_cran("xts", build = TRUE)
          remotes::install_cran("nanotime", build = TRUE)
          remotes::install_cran("zoo", build = TRUE)
        shell: Rscript {0}

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: build
        env:
          _R_CHECK_CRAN_INCOMING_: false
        run: |
          getPackages <- function(packs){
            packages <- unlist(
              tools::package_dependencies(packs,
              #which = "most",
                                          available.packages(),
                                          recursive=TRUE)
            )
            union(packs, packages)
          }
          packages <- getPackages(c("tidyverse", "tinytex", "data.table",
                                    "readxl", "openxlsx", "roxygen2", "devtools", "pkgdown",
                                    "DT", "bookdown", "grid", "plotly"))
          # build packages
          dir.create("rlib")
          dir.create("extract")
          dir.create("build")
          dir.create("check")
          setwd("rlib")
          download.packages(packages,
                            destdir = ".", 
                            type = "source")
          tfls <- dir(pattern = "*.tar.gz")
          keep <- charmatch(packages, tfls)
          pkgs <- packages[!is.na(keep)]
          for (pkg in pkgs) {
            tfl <- tfls[charmatch(pkg, tfls)]
            if(identical(tfl, character(0))) tfl <- NA
            message(tfl) #unsure what is going on
            if (!is.na(tfl)) {
              message("untar")
              utils::untar(tfl, exdir = "../extract")
              message("install_deps")
              remotes::install_deps(pkgdir = paste0("../extract/", pkg), build = TRUE)
              # if (!(pkg %in% c("tidyverse", "tinytex", "data.table", "readxl", "openxlsx", "roxygen2"))) {
              #   message("rcmdcheck")
              #   rcmdcheck::rcmdcheck(path = paste0("../extract/", pkg),
              #                        args = c("--no-manual", "--as-cran", "--no-build-vignettes"),
              #                        error_on = "warning",
              #                        check_dir = "../check")
              # }
              message("build")
              devtools::build(pkg = pkg, path = "../build", binary = TRUE)
            }
          }
        shell: Rscript {0}

      - name: Upload binaries
        if: success()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r-${{ matrix.config.r }}-pkg
          path: build

      - name: Upload sources
        if: success()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r-${{ matrix.config.r }}-src
          path: rlib
